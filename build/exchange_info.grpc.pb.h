// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: exchange_info.proto
#ifndef GRPC_exchange_5finfo_2eproto__INCLUDED
#define GRPC_exchange_5finfo_2eproto__INCLUDED

#include "exchange_info.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace cs739 {

class ExchangeInfo final {
 public:
  static constexpr char const* service_full_name() {
    return "cs739.ExchangeInfo";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ExchangeInteger(::grpc::ClientContext* context, const ::cs739::Integer& request, ::cs739::Integer* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs739::Integer>> AsyncExchangeInteger(::grpc::ClientContext* context, const ::cs739::Integer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs739::Integer>>(AsyncExchangeIntegerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs739::Integer>> PrepareAsyncExchangeInteger(::grpc::ClientContext* context, const ::cs739::Integer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs739::Integer>>(PrepareAsyncExchangeIntegerRaw(context, request, cq));
    }
    virtual ::grpc::Status ExchangeDouble(::grpc::ClientContext* context, const ::cs739::Double& request, ::cs739::Double* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs739::Double>> AsyncExchangeDouble(::grpc::ClientContext* context, const ::cs739::Double& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs739::Double>>(AsyncExchangeDoubleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs739::Double>> PrepareAsyncExchangeDouble(::grpc::ClientContext* context, const ::cs739::Double& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs739::Double>>(PrepareAsyncExchangeDoubleRaw(context, request, cq));
    }
    virtual ::grpc::Status ExchangeString(::grpc::ClientContext* context, const ::cs739::String& request, ::cs739::String* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs739::String>> AsyncExchangeString(::grpc::ClientContext* context, const ::cs739::String& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs739::String>>(AsyncExchangeStringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs739::String>> PrepareAsyncExchangeString(::grpc::ClientContext* context, const ::cs739::String& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs739::String>>(PrepareAsyncExchangeStringRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void ExchangeInteger(::grpc::ClientContext* context, const ::cs739::Integer* request, ::cs739::Integer* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExchangeInteger(::grpc::ClientContext* context, const ::cs739::Integer* request, ::cs739::Integer* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ExchangeDouble(::grpc::ClientContext* context, const ::cs739::Double* request, ::cs739::Double* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExchangeDouble(::grpc::ClientContext* context, const ::cs739::Double* request, ::cs739::Double* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ExchangeString(::grpc::ClientContext* context, const ::cs739::String* request, ::cs739::String* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExchangeString(::grpc::ClientContext* context, const ::cs739::String* request, ::cs739::String* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cs739::Integer>* AsyncExchangeIntegerRaw(::grpc::ClientContext* context, const ::cs739::Integer& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cs739::Integer>* PrepareAsyncExchangeIntegerRaw(::grpc::ClientContext* context, const ::cs739::Integer& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cs739::Double>* AsyncExchangeDoubleRaw(::grpc::ClientContext* context, const ::cs739::Double& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cs739::Double>* PrepareAsyncExchangeDoubleRaw(::grpc::ClientContext* context, const ::cs739::Double& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cs739::String>* AsyncExchangeStringRaw(::grpc::ClientContext* context, const ::cs739::String& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cs739::String>* PrepareAsyncExchangeStringRaw(::grpc::ClientContext* context, const ::cs739::String& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ExchangeInteger(::grpc::ClientContext* context, const ::cs739::Integer& request, ::cs739::Integer* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs739::Integer>> AsyncExchangeInteger(::grpc::ClientContext* context, const ::cs739::Integer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs739::Integer>>(AsyncExchangeIntegerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs739::Integer>> PrepareAsyncExchangeInteger(::grpc::ClientContext* context, const ::cs739::Integer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs739::Integer>>(PrepareAsyncExchangeIntegerRaw(context, request, cq));
    }
    ::grpc::Status ExchangeDouble(::grpc::ClientContext* context, const ::cs739::Double& request, ::cs739::Double* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs739::Double>> AsyncExchangeDouble(::grpc::ClientContext* context, const ::cs739::Double& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs739::Double>>(AsyncExchangeDoubleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs739::Double>> PrepareAsyncExchangeDouble(::grpc::ClientContext* context, const ::cs739::Double& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs739::Double>>(PrepareAsyncExchangeDoubleRaw(context, request, cq));
    }
    ::grpc::Status ExchangeString(::grpc::ClientContext* context, const ::cs739::String& request, ::cs739::String* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs739::String>> AsyncExchangeString(::grpc::ClientContext* context, const ::cs739::String& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs739::String>>(AsyncExchangeStringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs739::String>> PrepareAsyncExchangeString(::grpc::ClientContext* context, const ::cs739::String& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs739::String>>(PrepareAsyncExchangeStringRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ExchangeInteger(::grpc::ClientContext* context, const ::cs739::Integer* request, ::cs739::Integer* response, std::function<void(::grpc::Status)>) override;
      void ExchangeInteger(::grpc::ClientContext* context, const ::cs739::Integer* request, ::cs739::Integer* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ExchangeDouble(::grpc::ClientContext* context, const ::cs739::Double* request, ::cs739::Double* response, std::function<void(::grpc::Status)>) override;
      void ExchangeDouble(::grpc::ClientContext* context, const ::cs739::Double* request, ::cs739::Double* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ExchangeString(::grpc::ClientContext* context, const ::cs739::String* request, ::cs739::String* response, std::function<void(::grpc::Status)>) override;
      void ExchangeString(::grpc::ClientContext* context, const ::cs739::String* request, ::cs739::String* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::cs739::Integer>* AsyncExchangeIntegerRaw(::grpc::ClientContext* context, const ::cs739::Integer& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cs739::Integer>* PrepareAsyncExchangeIntegerRaw(::grpc::ClientContext* context, const ::cs739::Integer& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cs739::Double>* AsyncExchangeDoubleRaw(::grpc::ClientContext* context, const ::cs739::Double& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cs739::Double>* PrepareAsyncExchangeDoubleRaw(::grpc::ClientContext* context, const ::cs739::Double& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cs739::String>* AsyncExchangeStringRaw(::grpc::ClientContext* context, const ::cs739::String& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cs739::String>* PrepareAsyncExchangeStringRaw(::grpc::ClientContext* context, const ::cs739::String& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ExchangeInteger_;
    const ::grpc::internal::RpcMethod rpcmethod_ExchangeDouble_;
    const ::grpc::internal::RpcMethod rpcmethod_ExchangeString_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ExchangeInteger(::grpc::ServerContext* context, const ::cs739::Integer* request, ::cs739::Integer* response);
    virtual ::grpc::Status ExchangeDouble(::grpc::ServerContext* context, const ::cs739::Double* request, ::cs739::Double* response);
    virtual ::grpc::Status ExchangeString(::grpc::ServerContext* context, const ::cs739::String* request, ::cs739::String* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ExchangeInteger : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExchangeInteger() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ExchangeInteger() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExchangeInteger(::grpc::ServerContext* /*context*/, const ::cs739::Integer* /*request*/, ::cs739::Integer* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExchangeInteger(::grpc::ServerContext* context, ::cs739::Integer* request, ::grpc::ServerAsyncResponseWriter< ::cs739::Integer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExchangeDouble : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExchangeDouble() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ExchangeDouble() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExchangeDouble(::grpc::ServerContext* /*context*/, const ::cs739::Double* /*request*/, ::cs739::Double* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExchangeDouble(::grpc::ServerContext* context, ::cs739::Double* request, ::grpc::ServerAsyncResponseWriter< ::cs739::Double>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExchangeString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExchangeString() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ExchangeString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExchangeString(::grpc::ServerContext* /*context*/, const ::cs739::String* /*request*/, ::cs739::String* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExchangeString(::grpc::ServerContext* context, ::cs739::String* request, ::grpc::ServerAsyncResponseWriter< ::cs739::String>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ExchangeInteger<WithAsyncMethod_ExchangeDouble<WithAsyncMethod_ExchangeString<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ExchangeInteger : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExchangeInteger() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::cs739::Integer, ::cs739::Integer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cs739::Integer* request, ::cs739::Integer* response) { return this->ExchangeInteger(context, request, response); }));}
    void SetMessageAllocatorFor_ExchangeInteger(
        ::grpc::MessageAllocator< ::cs739::Integer, ::cs739::Integer>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cs739::Integer, ::cs739::Integer>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExchangeInteger() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExchangeInteger(::grpc::ServerContext* /*context*/, const ::cs739::Integer* /*request*/, ::cs739::Integer* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExchangeInteger(
      ::grpc::CallbackServerContext* /*context*/, const ::cs739::Integer* /*request*/, ::cs739::Integer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ExchangeDouble : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExchangeDouble() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::cs739::Double, ::cs739::Double>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cs739::Double* request, ::cs739::Double* response) { return this->ExchangeDouble(context, request, response); }));}
    void SetMessageAllocatorFor_ExchangeDouble(
        ::grpc::MessageAllocator< ::cs739::Double, ::cs739::Double>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cs739::Double, ::cs739::Double>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExchangeDouble() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExchangeDouble(::grpc::ServerContext* /*context*/, const ::cs739::Double* /*request*/, ::cs739::Double* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExchangeDouble(
      ::grpc::CallbackServerContext* /*context*/, const ::cs739::Double* /*request*/, ::cs739::Double* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ExchangeString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExchangeString() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::cs739::String, ::cs739::String>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cs739::String* request, ::cs739::String* response) { return this->ExchangeString(context, request, response); }));}
    void SetMessageAllocatorFor_ExchangeString(
        ::grpc::MessageAllocator< ::cs739::String, ::cs739::String>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cs739::String, ::cs739::String>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExchangeString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExchangeString(::grpc::ServerContext* /*context*/, const ::cs739::String* /*request*/, ::cs739::String* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExchangeString(
      ::grpc::CallbackServerContext* /*context*/, const ::cs739::String* /*request*/, ::cs739::String* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ExchangeInteger<WithCallbackMethod_ExchangeDouble<WithCallbackMethod_ExchangeString<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ExchangeInteger : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExchangeInteger() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ExchangeInteger() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExchangeInteger(::grpc::ServerContext* /*context*/, const ::cs739::Integer* /*request*/, ::cs739::Integer* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExchangeDouble : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExchangeDouble() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ExchangeDouble() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExchangeDouble(::grpc::ServerContext* /*context*/, const ::cs739::Double* /*request*/, ::cs739::Double* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExchangeString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExchangeString() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ExchangeString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExchangeString(::grpc::ServerContext* /*context*/, const ::cs739::String* /*request*/, ::cs739::String* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExchangeInteger : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExchangeInteger() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ExchangeInteger() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExchangeInteger(::grpc::ServerContext* /*context*/, const ::cs739::Integer* /*request*/, ::cs739::Integer* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExchangeInteger(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExchangeDouble : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExchangeDouble() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ExchangeDouble() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExchangeDouble(::grpc::ServerContext* /*context*/, const ::cs739::Double* /*request*/, ::cs739::Double* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExchangeDouble(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExchangeString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExchangeString() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ExchangeString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExchangeString(::grpc::ServerContext* /*context*/, const ::cs739::String* /*request*/, ::cs739::String* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExchangeString(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExchangeInteger : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExchangeInteger() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExchangeInteger(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExchangeInteger() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExchangeInteger(::grpc::ServerContext* /*context*/, const ::cs739::Integer* /*request*/, ::cs739::Integer* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExchangeInteger(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExchangeDouble : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExchangeDouble() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExchangeDouble(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExchangeDouble() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExchangeDouble(::grpc::ServerContext* /*context*/, const ::cs739::Double* /*request*/, ::cs739::Double* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExchangeDouble(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExchangeString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExchangeString() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExchangeString(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExchangeString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExchangeString(::grpc::ServerContext* /*context*/, const ::cs739::String* /*request*/, ::cs739::String* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExchangeString(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExchangeInteger : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExchangeInteger() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cs739::Integer, ::cs739::Integer>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cs739::Integer, ::cs739::Integer>* streamer) {
                       return this->StreamedExchangeInteger(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExchangeInteger() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExchangeInteger(::grpc::ServerContext* /*context*/, const ::cs739::Integer* /*request*/, ::cs739::Integer* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExchangeInteger(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cs739::Integer,::cs739::Integer>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExchangeDouble : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExchangeDouble() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cs739::Double, ::cs739::Double>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cs739::Double, ::cs739::Double>* streamer) {
                       return this->StreamedExchangeDouble(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExchangeDouble() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExchangeDouble(::grpc::ServerContext* /*context*/, const ::cs739::Double* /*request*/, ::cs739::Double* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExchangeDouble(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cs739::Double,::cs739::Double>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExchangeString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExchangeString() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cs739::String, ::cs739::String>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cs739::String, ::cs739::String>* streamer) {
                       return this->StreamedExchangeString(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExchangeString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExchangeString(::grpc::ServerContext* /*context*/, const ::cs739::String* /*request*/, ::cs739::String* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExchangeString(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cs739::String,::cs739::String>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ExchangeInteger<WithStreamedUnaryMethod_ExchangeDouble<WithStreamedUnaryMethod_ExchangeString<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ExchangeInteger<WithStreamedUnaryMethod_ExchangeDouble<WithStreamedUnaryMethod_ExchangeString<Service > > > StreamedService;
};

}  // namespace cs739


#endif  // GRPC_exchange_5finfo_2eproto__INCLUDED
